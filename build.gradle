plugins {
    id 'fabric-loom' version '1.3-SNAPSHOT' apply(false)
    id 'net.minecraftforge.gradle' version '[6.0,6.2)' apply(false)
    id 'org.spongepowered.gradle.vanilla' version '0.2.1-SNAPSHOT' apply(false)
    id "org.spongepowered.mixin" version "${mixin_version}" apply(false)
    id "me.modmuss50.mod-publish-plugin" version "0.2.0"
}

ext.isSnapshot = providers.environmentVariable("SNAPSHOT").map {it == "true"}.getOrElse(false)

allprojects {
    version = "${mod_version}+mc${minecraft_version}${isSnapshot ? '-SNAPSHOT' : ''}"
}

subprojects {
    apply plugin: 'java'

    base {
        archivesName = "${mod_name}-${project.name}"
    }

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    java.withSourcesJar()

    jar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }
        manifest {
            attributes([
                    'Specification-Title'     : mod_name,
                    'Specification-Vendor'    : mod_author,
                    'Specification-Version'   : project.jar.archiveVersion,
                    'Implementation-Title'    : project.name,
                    'Implementation-Version'  : project.jar.archiveVersion,
                    'Implementation-Vendor'   : mod_author,
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    'Timestamp'               : System.currentTimeMillis(),
                    'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                    'Built-On-Minecraft'      : minecraft_version
            ])
        }
    }

    sourcesJar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }
    }

    repositories {
        mavenCentral()
        maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
        maven {
            name = 'BlameJared Maven (JEI / CraftTweaker / Bookshelf)'
            url = 'https://maven.blamejared.com'
        }
    }

    tasks.withType(JavaCompile).configureEach {

        it.options.encoding = 'UTF-8'
        it.options.getRelease().set(17)
    }

    processResources {
        filesMatching(['pack.mcmeta', 'fabric.mod.json', 'mods.toml', '*.mixins.json']) {
            expand project.properties
        }
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata).configureEach {

        enabled = false
    }
}

publishMods {
    dryRun = providers.environmentVariable("CURSE_TOKEN").orElse(null).map { it == null }
    changelog = file("./CHANGELOG.md").text
    type = STABLE

    def options = curseforgeOptions {
        projectId = "${curseforge_id}"
        accessToken = providers.environmentVariable("CURSE_TOKEN")
        minecraftVersions.add("${minecraft_version}")
    }
    curseforge("curseforgeForge") {
        from options
        file = project.provider { project(":forge").tasks.jar }.flatMap { it.archiveFile }
        modLoaders.add("forge")
        modLoaders.add("Java 17")
    }

    curseforge("curseforgeFabric") {
        from options

        file = project.provider { project(":fabric").tasks.remapJar }.flatMap { it.archiveFile }
        modLoaders.add("fabric")

        requires {
            slug = "fabric-api"
        }

    }

//    Todo: WILL ADD MODRINTH ONCE THEY FIX THEIR OVERREACHING TOS
//        modrinth {
//            projectId = "abcdef"
//            accessToken = providers.environmentVariable("MODRINTH_TOKEN")
//            minecraftVersions.add("1.20.1")
//        }

//        github {
//            repository = "test/example"
//            accessToken = providers.environmentVariable("GITHUB_TOKEN")
//            commitish = "main"
//        }
}
